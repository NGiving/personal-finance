<script>
<% if (locals.expenses?.labels.length) { %>
    // setup block
    const data = {
        labels: <%- JSON.stringify(expenses.labels) %>,
        datasets: [{
            label: '$',
            data: <%- JSON.stringify(expenses.data) %>,
            borderWidth: 1,
            backgroundColor: ["#3e95cd", "#8e5ea2","#3cba9f","#e8c3b9","#c45850"],
            hoverBorderColor: ["#3e95cd", "#8e5ea2","#3cba9f","#e8c3b9","#c45850"],
            hoverBorderWidth: 3,
            hoverOffset: 10,
            weight: 1,
            radius: '70%',
            cutout: '45%',
            borderRadius: 5,
            borderWidth: 2
        }]
    }

    // doughnutLabel plugin block
    const doughtnutLabel = {
        id: 'doughtnutLabel',
        beforeDraw(chart, args, options) {
            const { ctx, chartArea: { top, right, bottom, left, width, height }} = chart
            ctx.save()
            ctx.fillStyle = options.fontColor
            ctx.font = 'bold 45px "Poppins"'
            ctx.textAlign = 'center'
            const text = new Date().toLocaleString('default', { month: 'short' })
            ctx.fillText(text, width/2, 45 * 0.68 / 2 + height/2)
        }
    }

    // outLabel plugin block
    const outLabel = {
        id: 'outLabel',
        afterDraw(chart, args, options) {
            const { ctx, chartArea: { top, right, bottom, left, width, height }} = chart
            
            function drawLine(ctx, x0, y0, xs, ys, width, color) {
                ctx.beginPath()
                ctx.moveTo(x0, y0)
                xs.forEach((x, n) => {
                    ctx.lineTo(x, ys[n])
                })
                ctx.strokeStyle = color
                ctx.lineWidth = width
                ctx.stroke()
                ctx.closePath()
            }

            chart.data.datasets.forEach((dataset, i) => {
                chart.getDatasetMeta(i).data.forEach((datapoint, index) => {
                    const angle = (datapoint.startAngle + datapoint.endAngle) / 2
                    const cosA = Math.cos(angle)
                    const sinA = Math.sin(angle)
                    const d = datapoint.outerRadius - 2
                    const x0 = datapoint.x + cosA * d
                    const y0 = datapoint.y + sinA * d
                    const x1 = datapoint.x + cosA * (d+25)
                    const y1 = datapoint.y + sinA * (d+25)
                    const color = dataset.backgroundColor[index]

                    drawLine(ctx, x0, y0, [x1, x1 <= width/2 ? x1-20 : x1+20], [y1, y1], 3, color)
                    
                    ctx.font = 'bold 11px "Poppins"'
                    ctx.textAlign = 'center'
                    ctx.fillStyle = color
                    ctx.textAlign = x1 <= width/2 ? 'right' : 'left'
                    const words = chart.data.labels[index].split(' ')
                    const wordsFilter = []
                    for (let j = 0; j < words.length; j++) {
                        if (words[j].length === 1 || words[j+1]?.length === 1) {
                            wordsFilter.push(words[j] + ' ' + words[j+1])
                            j++
                        } else {
                            wordsFilter.push(words[j])
                        }
                    }
                    wordsFilter.reverse().forEach((text, n) => {
                        ctx.fillText(text, x1 <= width/2 ? x1-16 : x1+16, y1-6-n*12)
                    })
                })
            })
        }
    }

    // customCanvasBackgroundColor block
    const customCanvasBackgroundColor = {
        id: 'customCanvasBackgroundColor',
        beforeDraw: (chart, args, options) => {
            const {ctx} = chart
            ctx.save()
            ctx.globalCompositeOperation = 'destination-over'
            
            const grad = ctx.createLinearGradient(0, 0, chart.width, chart.height)
            grad.addColorStop(0, '#ffffff')
            grad.addColorStop(0.5, '#f7f7f7')
            grad.addColorStop(1, '#ffffff')
            
            ctx.fillStyle = grad
            ctx.fillRect(0, chart.height/2, chart.width, chart.height/2)
            ctx.restore()
        }
    }

    // config block
    const config = {
        plugins: [doughtnutLabel, outLabel, customCanvasBackgroundColor],
        type: 'doughnut',
        data,
        options: {
            plugins: {
                legend: {
                    display: false
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return `${context.dataset.label}${Number(context.formattedValue).toFixed(2)}`
                        }
                    }
                },
                doughtnutLabel: {
                    fontColor: 'black'
                }
            }
        }
    }

    // render  block
    const expenses = new Chart(
        document.getElementById('expenses'),
        config
    )
<% } %>

let budgetCharts = []
const progressBar = {
    id: 'progressBar',
    beforeDatasetDraw: (chart, args, options) => {
        const { ctx, chartArea: {top, bottom, left, right, width, height}, scales: {x, y} } = chart
        ctx.save()

        data.datasets[0].data.forEach((datapoint, index) =>  {
            ctx.beginPath()
            ctx.fillStyle = '#d4d6d5'
            ctx.fillRect(left, y.getPixelForValue(index) - height/2, width, height)
        })
    }
}

<% if (locals.budgets) { %>
    <% budgets.forEach((budget, i) => { %>
        budgetCharts.push(new Chart(document.getElementById(`budget${<%= i %>}`), {
            type: 'bar',
            data: {
                labels: <%- JSON.stringify(Array.of(budget.category)) %>,
                datasets: [{
                    label: 'Amount Spent',
                    data: <%- JSON.stringify(Array.of(locals.expenses?.data[expenses.labels.indexOf(budget.category)] ?? 0)) %>,
                    backgroundColor: ['#00cfaa'],
                    borderColor: ['#00cfaa'],
                    borderWidth: 0,
                    borderSkipped: false,
                    borderRadius: 5,
                    barPercentage: 1,
                    categoryPercentage: 1
                }]
            },
            options: {
                maintainAspectRatio: false,
                events: [],
                indexAxis: 'y',
                plugins: {
                    legend: {
                        display: false
                    },
                    tooltip: {
                        enabled: false
                    }
                },
                scales: {
                    x: {
                        min: 0,
                        max: <%- JSON.stringify(parseFloat(`${budget.amount/100}.${budget.amount%100}`)) %>,
                        grid: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            display: false
                        },
                        border: {
                            display: false
                        }
                    },
                    y: {
                        beginAtZero: true,
                        grid: {
                            display: false,
                            drawBorder: false
                        },
                        ticks: {
                            display: false
                        }
                    }
                }
            }
        }))
    <% }) %>
<% } %>
</script>